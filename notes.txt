npm install --save-dev jest

expect(eval)
.toBe() = uses Object.is to test exact equality
.not.toBe() = not lets you test for the opposite of a matcher
.toEqual() = recursively checks every field of an object or array
.toStrictEqual() = preffered over toEqual, doesn't ignore undefined values
.toBeNull() = matches only null 
.toBeUndefined() = matches only undefined 
.toBeDefined() = opposite of toBeUndefined
.toBeTruthy() = matches anything that an if statement treats as true
.toBeFalsy() = matches anything that an if statement treats as false

expect(number)
.toBeGreaterThan()
.toBeGreaterThanOrEqual() 
.toBeLessThan()
.toBeLessThanOrEqual() 
.toBeCloseTo() works for floating point numbers, toEqual does not, because of rounding errors. 
test('adding floating point numbers', () => {
  const value = 0.1 + 0.2;
  //expect(value).toBe(0.3);           This won't work because of rounding error
  expect(value).toBeCloseTo(0.3); // This works.
});

expect(string)
.toMatch

test("there is no I in team", () => {
  expect("team").not.toMatch(/I/);
});

test('but there is a "stop" in Christoph', () => {
  expect("Christoph").toMatch(/stop/);
});

expect(iterable)
.toContain(value)